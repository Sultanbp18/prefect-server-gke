## Common parameters
# -- partially overrides common.names.name
nameOverride: ""
# -- fully override common.names.fullname
fullnameOverride: "prefect-worker"
# -- fully override common.names.namespace
namespaceOverride: ""
# -- labels to add to all deployed objects
commonLabels: {}
# -- annotations to add to all deployed objects
commonAnnotations: {}

## Deployment Configuration
worker:
  autoscaling:
    # -- enable autoscaling for the worker
    enabled: false
    # -- minimum number of replicas to scale down to
    minReplicas: 1
    # -- maximum number of replicas to scale up to
    maxReplicas: 1
    # -- target CPU utilization percentage for scaling the worker
    targetCPUUtilizationPercentage: 80
    # -- target memory utilization percentage for scaling the worker
    targetMemoryUtilizationPercentage: 80

  # -- unique cluster identifier, if none is provided this value will be inferred at time of helm install
  clusterUid: ""

  initContainer:
    # -- the resource specifications for the sync-base-job-template initContainer
    resources: {}
    # -- security context for the sync-base-job-template initContainer
    containerSecurityContext:
      # -- set init containers' security context runAsUser
      runAsUser: 1001
      # -- set init containers' security context runAsNonRoot
      runAsNonRoot: true
      # -- set init containers' security context readOnlyRootFilesystem
      readOnlyRootFilesystem: true
      # -- set init containers' security context allowPrivilegeEscalation
      allowPrivilegeEscalation: false
      # -- set init container's security context capabilities
      capabilities: {}
    # -- additional sidecar containers
    extraContainers: []

  # -- optional dns policy for worker deployment
  dnsPolicy: ""

  dnsConfig:
    # -- optional list of IP addresses that will be used as dns servers for the Pod
    nameservers: []
    # -- optional list of dns search domains for hostname lookup in the Pod
    searches: []
    # -- optional list of dns options for the Pod
    options: []

  image:
    # -- worker image repository
    repository: prefecthq/prefect
    # -- prefect image tag (immutable tags are recommended)
    prefectTag: 3.4.0-python3.11-kubernetes
    # -- worker image pull policy
    pullPolicy: IfNotPresent
    # -- worker image pull secrets
    pullSecrets: []
    # -- enable worker image debug mode
    debug: false

  ## general configuration of the worker
  config:
    # -- the work pool that your started worker will poll.
    workPool: "kubernetes-pool"
    # -- one or more work queue names for the worker to pull from. if not provided, the worker will pull from all work queues in the work pool
    workQueues: []
    # -- how often the worker will query for runs
    queryInterval: 5
    # -- when querying for runs, how many seconds in the future can they be scheduled
    prefetchSeconds: 10
    # -- connect using HTTP/2 if the server supports it (experimental)
    http2: true
    # -- specify the worker type
    type: kubernetes
    # --  install policy to use workers from Prefect integration packages.
    installPolicy: prompt
    # -- the name to give to the started worker. If not provided, a unique name will be generated.
    name: null
    # -- maximum number of flow runs to start simultaneously (default: unlimited)
    limit: null

    # -- Base job template configuration
    baseJobTemplate:
      # -- the name of an existing ConfigMap containing a base job template. NOTE - the key must be 'baseJobTemplate.json'
      existingConfigMapName: ""
      # -- JSON formatted base job template. If data is provided here, the chart will generate a configmap and mount it to the worker pod
      configuration: |
        {
          "job_configuration": {
            "namespace": "prefect",
            "image": "prefecthq/prefect:3.4.0-python3.11",
            "image_pull_policy": "IfNotPresent",
            "service_account_name": "prefect-worker",
            "resource_requests": {
              "cpu": "100m",
              "memory": "256Mi"
            },
            "resource_limits": {
              "cpu": "500m",
              "memory": "512Mi"
            }
          }
        }

  ## connection settings
  # -- one of 'cloud', 'selfManagedCloud', or 'selfHostedServer'
  apiConfig: selfHostedServer

  selfHostedServerApiConfig:
    # -- prefect API url (PREFECT_API_URL)
    # For internal cluster access:
    apiUrl: "http://prefect-server.prefect.svc.cluster.local:4200/api"
    # For external access via ingress:
    # apiUrl: "https://prefect.example.com/api"

    # ref: https://docs.prefect.io/v3/develop/settings-and-profiles#security-settings
    basicAuth:
      # -- enable basic auth for the worker, for an administrator/password combination. must be enabled on the server as well
      enabled: false
      # -- basic auth credentials in the format admin:<your-password> (no brackets)
      authString: "admin:pass"
      # -- name of existing secret containing basic auth credentials. takes precedence over authString. must contain a key `auth-string` with the value of the auth string
      existingSecret: ""

  # -- the number of old ReplicaSets to retain to allow rollback
  revisionHistoryLimit: 10

  # -- number of worker replicas to deploy
  replicaCount: 1

  resources:
    # -- the requested resources for the worker container
    requests:
      memory: 256Mi
      cpu: 100m
    # -- the requested limits for the worker container
    limits:
      memory: 1Gi
      cpu: 1000m

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    enabled: true
    config:
      # -- The number of seconds to wait before starting the first probe.
      initialDelaySeconds: 10
      # -- The number of seconds to wait between consecutive probes.
      periodSeconds: 10
      # -- The number of seconds to wait for a probe response before considering it as failed.
      timeoutSeconds: 5
      # -- The number of consecutive failures allowed before considering the probe as failed.
      failureThreshold: 3
      # -- The minimum consecutive successes required to consider the probe successful.
      successThreshold: 1

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext:
    # -- set worker pod's security context runAsUser
    runAsUser: 1001
    # -- set worker pod's security context runAsNonRoot
    runAsNonRoot: true
    # -- set worker pod's security context fsGroup
    fsGroup: 1001
    # -- set worker pod's seccomp profile
    seccompProfile:
      type: RuntimeDefault

  # -- priority class name to use for the worker pods
  priorityClassName: ""

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    # -- set worker containers' security context runAsUser
    runAsUser: 1001
    # -- set worker containers' security context runAsNonRoot
    runAsNonRoot: true
    # -- set worker containers' security context readOnlyRootFilesystem
    readOnlyRootFilesystem: true
    # -- set worker containers' security context allowPrivilegeEscalation
    allowPrivilegeEscalation: false
    # -- set worker container's security context capabilities
    capabilities: {}

  # -- extra labels for worker pod
  podLabels: {}

  # -- extra annotations for worker pod
  podAnnotations: {}

  # -- affinity for worker pods assignment
  affinity: {}

  # -- node labels for worker pods assignment
  nodeSelector: {}

  # -- tolerations for worker pods assignment
  tolerations: []

  # -- array with extra environment variables to add to worker nodes
  extraEnvVars: []

  # -- name of existing ConfigMap containing extra env vars to add to worker nodes
  extraEnvVarsCM: ""

  # -- names of existing ConfigMaps containing extra env vars to add to worker nodes
  extraEnvVarsCMs: []

  # -- name of existing Secret containing extra env vars to add to worker nodes
  extraEnvVarsSecret: ""

  # -- names of existing Secrets containing extra env vars to add to worker nodes
  extraEnvVarsSecrets: []

  # -- additional sidecar containers
  extraContainers: []

  # -- array with extra volumes for the worker pod
  extraVolumes: []

  # -- array with extra volumeMounts for the worker pod
  extraVolumeMounts: []

  # -- array with extra Arguments for the worker container to start with
  extraArgs: []

## ServiceAccount configuration
serviceAccount:
  # -- specifies whether a ServiceAccount should be created
  create: true
  # -- the name of the ServiceAccount to use. if not set and create is true, a name is generated using the common.names.fullname template
  name: ""
  # -- additional service account annotations (evaluated as a template)
  annotations: {}

## Role configuration
role:
  # -- specifies whether a Role should be created
  create: true
  # -- array with extra permissions to add to the worker role
  extraPermissions: 
    - apiGroups: [""]
      resources: ["pods", "pods/log"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

## RoleBinding configuration
rolebinding:
  # -- specifies whether a RoleBinding should be created
  create: true
